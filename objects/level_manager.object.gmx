<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level_unit_width = 20;
level_unit_height = 2;

cell_size = 32;
grid_width = obj_display_manager.ideal_width / cell_size * level_unit_width;
grid_height = obj_display_manager.ideal_height / cell_size * level_unit_height;
level_tileset_index = 0;

layer_1[0, 0] = 13;

for (w = 0; w &lt; grid_width; w++)
{
    for (h = 0; h &lt; grid_height; h++)
    {
        layer_1[w, h] = 4;
    };
    
};

background_visible[0] = true;
background_ = background1;

audio_play_sound(sound1_Juhani_Junkala__Retro_Game_Music_Pack__Level_1, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update cell value
//layer_1[floor(mouse_x / cell_size), floor(mouse_y / cell_size)] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_bottom);
draw_rectangle(0, obj_display_manager.ideal_width, cell_size, obj_display_manager.ideal_width - cell_size, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (w = 0; w &lt; grid_width; w++)
{
    for (h = 0; h &lt; grid_height; h++)
    {
        // Draw grid
        draw_set_colour(c_green);
        draw_rectangle(w * cell_size,
        h * cell_size,
        w * cell_size + cell_size,
        h * cell_size + cell_size,
        true);
        if (layer_1[w, h] &gt; 0)
        {
            // Draw data
            draw_sprite_part(spr_tileset,
            level_tileset_index,
            layer_1[w, h] * 32 + layer_1[w, h],
            0,
            cell_size,
            cell_size,
            w * cell_size,
            h * cell_size);
        }
    };
    
};

// Debug select
var _x = floor(mouse_x / cell_size) * cell_size;
var _y = floor(mouse_y / cell_size) * cell_size;
draw_set_colour(c_white);
draw_rectangle(_x, _y, _x + cell_size, _y + cell_size, true);
if (mouse_check_button(mb_left))
{
    if (floor(mouse_x / cell_size) &gt; -1 || floor(mouse_y / cell_size) &gt; -1)
    {
        layer_1[floor(mouse_x / cell_size), floor(mouse_y / cell_size)] = 1;
    }
}
else if (mouse_check_button(mb_right))
{
    if (floor(mouse_x / cell_size) &gt; -1 || floor(mouse_y / cell_size) &gt; -1)
    {
        layer_1[floor(mouse_x / cell_size), floor(mouse_y / cell_size)] = -1;
    }
}

// Debug controls
var _vspd = 4;
view_xview[0] += (keyboard_check(ord("D")) - keyboard_check(ord("A"))) * _vspd;
view_yview[0] += (keyboard_check(ord("S")) - keyboard_check(ord("W"))) * _vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

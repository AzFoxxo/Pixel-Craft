<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu state
menu = 0;
menu_music_is_zero = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the selectable objects
if (menu == 0) {
    var highlight = c_black;
    for (i = 0; i != obj_asset_z_parent; i++)
    {
        if (obj_editor.mode == object_modes._erase_) 
            break;
        
        if (i == obj_editor.object) {
            highlight = c_white;
        } else {
            highlight = c_black;
        }
        button_basic_clickable(0 + (32 * (i - obj_asset_enemy)), 0, 32, 32, c_black, c_black, c_black, object_get_sprite(i), scr_menu_set_active_block_item, i, 1);
        
        draw_set_colour(highlight);
        draw_rectangle(0 + (32 * (i - obj_asset_enemy)), 32, 0 + (32 * (i - obj_asset_enemy)) + 32, 36, false);  
        
    };
    
    button_basic_clickable(view_wview[0] - 64, 0, 64, 32, c_black, c_black, c_white, "Menu", scr_menu_set_page, 1, 1);
    
    var _ui_subimage = 0;
    if (obj_editor.mode == object_modes._place_) {
        _ui_subimage = 1;
    }
    
    button_basic_clickable(view_wview[0] - 96, 0, 32, 32, c_black, c_black, _ui_subimage, spr_ui_edit, scr_menu_set_object_mode, 1, 1);
    
    if (menu == 1) {
        obj_audio.audio_music_to_play = obj_editor.level_music;
    }
} else if (menu == 1) {
    if (instance_exists(obj_editor)) {
        obj_editor.mode = object_modes._empty_;
    }
    draw_set_alpha(0.75);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, view_wview[0], view_hview[0], false);
    draw_set_alpha(1);
    button_basic_clickable(0, 0, 32, 32, c_black, c_black, c_white, "X", scr_menu_set_page, 0, 1);i++;i++;
    
    
    
    // Save option
    options[0, 0] = scr_menu_set_option;
    options[0, 1] = "play";
    options[0, 2] = "Play";
    
    // Quit option
    options[1, 0] = scr_menu_set_option;
    options[1, 1] = "quit";
    options[1, 2] = "Quit";
    
    // Music option
    options[2, 0] = scr_menu_set_option;
    options[2, 1] = "level_options";
    options[2, 2] = "Level options";
    
    // Draw the menus
    var _width = view_wview[0] / 2;
    
    var _inc = 64;
    var _hstart = (view_hview[0] / 2) - _inc;
    draw_set_halign(fa_center);
    draw_text(view_wview[0] / 2, 32, "Options menu:");
    draw_set_halign(fa_left);
    for (i = 0; i &lt; 3; i++)
    {
        button_basic_clickable((view_wview[0] - _width) / 2, _hstart + (_inc * i), _width, 32, c_black, c_black, c_white, options[i, 2], options[i, 0], options[i, 1], 1);
    };
} else if (menu == 2) {
    if (instance_exists(obj_editor)) {
        obj_editor.mode = object_modes._empty_;
    }
    draw_set_alpha(0.75);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, view_wview[0], view_hview[0], false);
    draw_set_alpha(1);
    button_basic_clickable(0, 0, 32, 32, c_black, c_black, c_white, "X", scr_menu_set_page, 0, 1);i++;i++;
    
    
    
    // Save option
    options[0, 0] = scr_menu_set_option;
    options[0, 1] = "music";
    options[0, 2] = "Music (" + string(obj_editor.level_music+1) + ")";
    
    // Music option
    options[1, 0] = scr_menu_set_option;
    options[1, 1] = "view";
    // Text to display
    if (obj_editor.view_speed == 0) {
        var _text = "Follow";
    } else {
        if (obj_editor.view_speed == 1) {
            _text = "Slow";
        } else {
            _text = "Fast";
        }
    }
    options[1, 2] = "View (" + string(_text) + ")";
    
    // Time option option
    options[2, 0] = scr_menu_set_option;
    options[2, 1] = "level_options";
    options[2, 2] = "Level time (" + string(obj_editor.time) + ")";
    
    // Back option
    options[3, 0] = scr_menu_set_option;
    options[3, 1] = "menu_back";
    options[3, 2] = "Back";
    
    // Draw the menus
    var _width = view_wview[0] / 2;
    
    var _inc = 64;
    var _hstart = (view_hview[0] / 2) - _inc;
    draw_set_halign(fa_center);
    draw_text(view_wview[0] / 2, 32, "Level options:");
    draw_set_halign(fa_left);
    for (i = 0; i &lt; 3; i++)
    {
        if (i != 2) {
            button_basic_clickable((view_wview[0] - _width) / 2, _hstart + (_inc * i), _width, 32, c_black, c_black, c_white, options[i, 2], options[i, 0], options[i, 1], 1);
        } else {
            button_basic_clickable((view_wview[0] - _width) / 2 + 48, _hstart + (_inc * i), _width - 96, 32, c_black, c_black, c_white, options[i, 2], options[i, 0], options[i, 1], 1);
            button_basic_clickable((view_wview[0] - _width) / 2, _hstart + (_inc * i), 32, 32, c_black, c_black, c_white, "+", scr_menu_set_option, "time_up", 1);
            button_basic_clickable(((view_wview[0] - _width) / 2) + _width - 32, _hstart + (_inc * i), 32, 32, c_black, c_black, c_white, "-", scr_menu_set_option, "time_down", 1);
        }
    };
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
